<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Posts on MillerJAM Site</title><link>http://millerjam.github.io/posts/</link><description>Recent content in Posts on MillerJAM Site</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sun, 27 Mar 2022 09:09:17 -0400</lastBuildDate><atom:link href="http://millerjam.github.io/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>Rust Lambda Hello World Tests</title><link>http://millerjam.github.io/posts/rust-lambda-hello-world-tests/</link><pubDate>Sun, 27 Mar 2022 09:09:17 -0400</pubDate><guid>http://millerjam.github.io/posts/rust-lambda-hello-world-tests/</guid><description>This is my third and final post in this series about getting started with writing Lambda&amp;rsquo;s in Rust. So far, we have created a new lambda, cross compiled it to run in the AWS Lamdba environment, and added some logging so we can debug issues and see how the code is executing.
In this final post, we will add tests and setup Github Actions to verify these test on any Pull Request.</description></item><item><title>Rust Lambda Hello World Logging</title><link>http://millerjam.github.io/posts/rust-lambda-hello-world-logging/</link><pubDate>Sun, 13 Mar 2022 14:35:38 -0400</pubDate><guid>http://millerjam.github.io/posts/rust-lambda-hello-world-logging/</guid><description>In my previous article, I started a tutorial on creating a lambda in Rust. If you missed it, you can catch up on that article here -&amp;gt; Rust Lambda Hello World
Lets add some logging Before we go much further with our Rust code, let&amp;rsquo;s add some logging. We are take advantage of the tracing library which is already integrated into many of the lambda dependencies.
Details about the tracing library are out of scope for this article, but you can learn more from the tracing crate docs</description></item><item><title>Rust Lambda Hello World</title><link>http://millerjam.github.io/posts/rust-lambda-hello-world/</link><pubDate>Mon, 07 Mar 2022 17:06:12 -0500</pubDate><guid>http://millerjam.github.io/posts/rust-lambda-hello-world/</guid><description>Getting started with AWS Lambda Rust Runtime I just finished a quick tutorial to create a hello world lambda using the AWS Lambda Rust Runtime
Github repo for the tutorial If you&amp;rsquo;re in a rush&amp;hellip;
You can view the completed source code here: rust_lambda_hello_world
Overview I think that Rust is a great fit for serverless and I wanted to start documenting how to use Rust in a lambda. Lambdas are a great opportunity to test out a new language without making a huge commitment in terms of time or resources.</description></item><item><title>My First Post</title><link>http://millerjam.github.io/posts/my-first-post/</link><pubDate>Tue, 22 Feb 2022 11:09:05 -0500</pubDate><guid>http://millerjam.github.io/posts/my-first-post/</guid><description>I started learning Serverless with Rust.
Here is a quick tutorial I started creating, rust_lambda_hello_world. This is a simple &amp;ldquo;hello world&amp;rdquo; lambda that uses the AWS Lambda Rust Runtime. It walks through creating the new project, adding crates, and how to cross compile for Amazon Linux 2 on x86. Finally, create a new AWS lambda function and invoke using the cli.
It was fun to get this started and there are a lot of additional things I can add around testing, logging.</description></item></channel></rss>